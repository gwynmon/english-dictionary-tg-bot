from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
from dotenv import load_dotenv
from googletrans import Translator as GoogleTranslator
import deepl
import os
import logging
import requests
from bs4 import BeautifulSoup
import re

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
load_dotenv('.env')

google_translator = GoogleTranslator()
DEEPL_API_KEY = os.getenv('DeepL_API_Key')
deepl_translator = deepl.Translator(DEEPL_API_KEY) if DEEPL_API_KEY else None

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise RuntimeError('TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env')

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def fetch_cambridge_definition(word: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å Cambridge Dictionary –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã."""
    try:
        clean_word = word.strip().lower().replace(' ', '-')
        url = f"https://dictionary.cambridge.org/dictionary/english/{clean_word}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 404:
            return ""
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        def_tag = soup.find('div', class_='def ddef_d db')
        if not def_tag:
            return ""

        raw = def_tag.get_text()
        clean = re.sub(r'\s+', ' ', raw).strip().rstrip(':.')
        return clean
    except Exception as e:
        logger.warning("Cambridge error for '%s': %s", word, e)
        return ""

async def translate_definition_to_russian(definition: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ Google Translate."""
    if not definition:
        return ""
    try:
        result = await google_translator.translate(definition, src='en', dest='ru')
        return result.text.strip()
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: %s", e)
        return ""

async def get_translations(word: str, src: str, dest: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã —á–µ—Ä–µ–∑ Google –∏ DeepL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)."""
    translations = {}

    # Google Translate
    try:
        google_res = await google_translator.translate(word, src=src, dest=dest)
        translations['Google'] = google_res.text.strip()
    except Exception as e:
        logger.warning("Google Translate error: %s", e)

    # DeepL
    if deepl_translator:
        try:
            target_lang = 'RU' if dest == 'ru' else 'EN-US'
            source_lang = 'RU' if src == 'ru' else 'EN'
            deepl_res = deepl_translator.translate_text(
                word, source_lang=source_lang, target_lang=target_lang
            )
            translations['DeepL'] = deepl_res.text.strip()
        except Exception as e:
            logger.warning("DeepL error: %s", e)

    return translations

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    chat_id = update.effective_chat.id

    welcome_path = 'welcome.jpg'
    caption = '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.'
    if os.path.exists(welcome_path):
        with open(welcome_path, 'rb') as f:
            await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)
    else:
        await context.bot.send_message(chat_id=chat_id, text=caption)

    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="mode::add")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è", callback_data="mode::quiz")]
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['mode'] = 'choose_mode'


async def add_word(update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ", callback_data="lang::ru")],
        [InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ", callback_data="lang::en")]
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —Å–ª–æ–≤–∞:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['mode'] = 'choose_lang'


async def process_next_word(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    words_queue = context.user_data.get('words_queue', [])
    if not words_queue:
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        context.user_data.clear()
        return

    word = words_queue[0]
    context.user_data['current_word'] = word
    src = context.user_data['src']
    dest = context.user_data['dest']

    translations = await get_translations(word, src, dest)
    if not translations:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ: {word}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
        )
        context.user_data['words_queue'] = words_queue[1:]
        await process_next_word(context, chat_id)
        return

    unique_variants = list(dict.fromkeys(translations.values()))
    keyboard = []
    for tr in unique_variants:
        keyboard.append([InlineKeyboardButton(tr, callback_data=f"select_trans::{tr}")])
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="select_trans::custom")])

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ¬´{word}¬ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['mode'] = 'selecting_translation'


async def proceed_with_word(chat_id, context, word_en: str, word_ru: str):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞."""
    definition_en = fetch_cambridge_definition(word_en)

    context.user_data['pending_word_en'] = word_en
    context.user_data['pending_word_ru'] = word_ru
    context.user_data['cambridge_definition_en'] = definition_en

    # –£—Å–µ–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ 30‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    def truncate(text: str, max_len=40) -> str:
        return (text[:max_len] + '‚Ä¶') if len(text) > max_len else text

    options = []
    if definition_en:
        en_label = truncate(definition_en)
        options.append((en_label, "orig"))
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ ‚Äî –±–µ–∑ await!
            result = google_translator.translate(definition_en, src='en', dest='ru')
            definition_ru = result.text.strip()
            context.user_data['cambridge_definition_ru'] = definition_ru
            ru_label = truncate(definition_ru)
            options.append((ru_label, "trans"))
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: %s", e)
            context.user_data['cambridge_definition_ru'] = ""
    else:
        context.user_data['cambridge_definition_ru'] = ""

    options.append(("‚úèÔ∏è –°–≤–æ—ë –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "custom"))

    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"def_choice::{code}")]
        for label, code in options
    ]
    keyboard.append([InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ", callback_data="action::rewrite")])
    keyboard.append([InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="action::skip")])

    msg = f"–°–ª–æ–≤–æ: **{word_en}**\n–ü–µ—Ä–µ–≤–æ–¥: **{word_ru}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:"
    if not definition_en:
        msg += "\n\n‚ö†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ Cambridge –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await context.bot.send_message(
        chat_id=chat_id,
        text=msg,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    context.user_data['mode'] = 'choosing_definition'


async def handle_text(update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    mode = context.user_data.get('mode')

    if mode == 'await_rewrite':
        words_queue = context.user_data.get('words_queue', [])
        if words_queue:
            words_queue[0] = text
            context.user_data['words_queue'] = words_queue
        await context.bot.send_message(chat_id=chat_id, text="–°–ª–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        await process_next_word(context, chat_id)
        return

    if mode == 'waiting_words':
        words = [w.strip() for w in text.replace('\n', ',').split(',') if w.strip()]
        if not words:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        context.user_data['words_queue'] = words
        await process_next_word(context, chat_id)
        return

    if mode == 'await_custom_translation':
        word = context.user_data['current_word']
        translation = text
        src = context.user_data['src']
        dest = context.user_data['dest']
        word_en = translation if dest == 'en' else word
        word_ru = word if src == 'ru' else translation
        await proceed_with_word(chat_id, context, word_en, word_ru)
        return

    if mode == 'await_custom_definition':
        word_en = context.user_data['pending_word_en']
        word_ru = context.user_data['pending_word_ru']
        custom_def = text
        payload = {
            'word_en': word_en,
            'word_ru': word_ru,
            'definition': custom_def,
            'definition_lang': 'custom'
        }
        context.user_data['pending_payload'] = payload
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º: %s", payload)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –°–ª–æ–≤–æ ¬´{word_en}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –≤–∞—à–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º!"
        )
        words_queue = context.user_data.get('words_queue', [])
        context.user_data['words_queue'] = words_queue[1:] if words_queue else []
        await process_next_word(context, chat_id)
        return


async def callback_query_handler(update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_id = query.message.chat_id

    if data == "mode::add":
        await add_word(update, context)
        return
    if data == "mode::quiz":
        await context.bot.send_message(chat_id=chat_id, text="–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")
        return

    if data in ("lang::ru", "lang::en"):
        lang = data.split("::")[1]
        context.user_data['src'] = lang
        context.user_data['dest'] = 'en' if lang == 'ru' else 'ru'
        context.user_data['mode'] = 'waiting_words'
        await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        return

    if data.startswith("select_trans::"):
        selected = data.split("::", 1)[1]
        word = context.user_data['current_word']
        src = context.user_data['src']
        dest = context.user_data['dest']

        if selected == "custom":
            context.user_data['mode'] = 'await_custom_translation'
            await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥:")
            return
        else:
            translation = selected
            word_en = translation if dest == 'en' else word
            word_ru = word if src == 'ru' else translation
            await proceed_with_word(chat_id, context, word_en, word_ru)
            return

    if data.startswith("def_choice::"):
        choice = data.split("::", 1)[1]
        word_en = context.user_data['pending_word_en']
        word_ru = context.user_data['pending_word_ru']

        if choice == "orig":
            definition = context.user_data.get('cambridge_definition_en', '')
            def_lang = 'en'
        elif choice == "trans":
            definition = context.user_data.get('cambridge_definition_ru', '')
            def_lang = 'ru'
        elif choice == "custom":
            # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–¥–µ—Å—å ‚Äî –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            return
        else:
            return

        payload = {
            'word_en': word_en,
            'word_ru': word_ru,
            'definition': definition,
            'definition_lang': def_lang
        }
        context.user_data['pending_payload'] = payload
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", payload)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –°–ª–æ–≤–æ ¬´{word_en}¬ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
        )
        words_queue = context.user_data.get('words_queue', [])
        context.user_data['words_queue'] = words_queue[1:] if words_queue else []
        await process_next_word(context, chat_id)
        return

    if data.startswith("action::"):
        action = data.split("::")[1]
        if action == "rewrite":
            context.user_data['mode'] = 'await_rewrite'
            await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:")
            return
        elif action == "skip":
            words_queue = context.user_data.get('words_queue', [])
            context.user_data['words_queue'] = words_queue[1:] if words_queue else []
            await context.bot.send_message(chat_id=chat_id, text="‚è≠ –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            await process_next_word(context, chat_id)
            return


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()